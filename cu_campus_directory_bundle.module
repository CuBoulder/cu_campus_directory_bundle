<?php
/**
 * @file
 * Code for the CU Campus Directory feature.
 */

include_once 'cu_campus_directory_bundle.features.inc';

/**
 * Implements module_preprocess_node.
 */
function cu_campus_directory_bundle_preprocess_node(&$vars) {
  if ($vars['type'] == 'directory_listing' && $vars['view_mode'] == 'full') {

    // Get the group the node is part of.
    $node = $vars['node'];
    $groups = og_get_entity_groups('node', $node);
    // Add a "part of" link.
    if ($groups) {
      $id = current($groups['node']);
      $group = og_membership_load($id);
      $parent_nid = $group->id;
      $parent_node = node_load($parent_nid);
      $vars['content']['parent']['#markup'] = 'Part of ' . l($parent_node->title, 'node/' . $parent_nid, array('html' => TRUE));
    }

    // Get members of this group.
    $members = cu_campus_directory_bundle_get_members($node->nid);
    if (!empty($members)) {
      $vars['content']['members']['#markup'] = theme('item_list', array('items' => $members));
      $vars['content']['members']['#weight'] = 1000;
    }
  }
}

/**
 * Get direct members of a OG group.
 */
function cu_campus_directory_bundle_get_members($nid) {
  // Get direct members ids of group.
  $query = db_select('og_membership', 'ogm');
  $query->condition('ogm.gid', $nid, '=');
  $query->condition('ogm.entity_type', 'node', '=');
  $query->fields('ogm', array('etid'));

  // Join node table so we can order alphabetically.
  $query->join('node', 'n', 'n.nid = ogm.etid');
  $query->fields('n', array('title'));
  $query->orderBy('title', 'ASC');
  $members = $query->execute()->fetchCol();

  // Render nodes.
  $nodes = array();
  foreach ($members as $nid) {
    $node = node_load($nid);
    $node_view = node_view($node, 'teaser');
    $nodes[$nid]['data'] = render($node_view);
  }
  return $nodes;
}

/**
 * Options for additional contact types.
 */
function cu_campus_directory_bundle_contact_types() {
  $options = array(
    'website' => 'Website',
    'email' => 'E-mail',
    'phone' => 'Phone'
  );
  return $options;
}

/**
 * Options for directory listing types.
 */
function cu_campus_directory_bundle_unit_types() {
  $options = array();
  return $options;
}

/**
 * Implements hook_node_update.
 *
 * Update url alias if a group is not a top level group.
 */
function cu_campus_directory_bundle_node_update($node) {
  if ($node->type == 'directory_listing') {
    $nid = $node->nid;
    $top_group = cu_campus_directory_bundle_get_top_group($nid);
    if (isset($top_group) && $top_group != $nid) {
      $top_node = node_load($top_group);
      $prefix = $top_node->field_directory_acronym[LANGUAGE_NONE][0]['value'];
      $prefix = 'listing/' . strtolower($prefix);
      //$node->path['alias'] = 'xxx';
      $path = $node->path;
      module_load_include('inc', 'pathauto', 'pathauto');
      $title = $node->title;
      $node->path['alias'] = $prefix . '/' . pathauto_cleanstring($title);
      $node->path['pathauto'] = 0;
    }
  }
}

/**
 * Implements hook_node_insert.
 *
 * Update url alias if a group is not a top level group.
 */
function cu_campus_directory_bundle_node_insert($node) {
  if ($node->type == 'directory_listing') {
    $nid = $node->nid;
    $top_group = cu_campus_directory_bundle_get_top_group($nid);
    if (isset($top_group) && $top_group != $nid) {
      $top_node = node_load($top_group);
      $prefix = $top_node->field_directory_acronym[LANGUAGE_NONE][0]['value'];
      $prefix = 'listing/' . strtolower($prefix);
      //$node->path['alias'] = 'xxx';
      $path = $node->path;
      module_load_include('inc', 'pathauto', 'pathauto');
      $title = $node->title;
      $node->path['alias'] = $prefix . '/' . pathauto_cleanstring($title);
      $node->path['pathauto'] = 0;
    }
  }
}

/**
 * Implements hook_secure_permissions.
 */
function cu_campus_directory_bundle_secure_permissions($role) {
  $permissions = array(
    'administrator' => array(
      'create directory_listing content',
      'delete any directory_listing content',
      'delete own directory_listing content',
      'edit any directory_listing content',
      'edit own directory_listing content',
      'edit group hierarchy',
    ),
    'anonymous user' => array(
    ),
    'authenticated user' => array(
    ),
    'content_editor' => array(

    ),
    'developer' => array(
      'create directory_listing content',
      'delete any directory_listing content',
      'delete own directory_listing content',
      'edit any directory_listing content',
      'edit own directory_listing content',
      'edit group hierarchy',
      'administer organic groups',
    ),
    'edit_my_content' => array(
    ),
    'site_owner' => array(
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Let Drupal know that we've got bean--articles.tpl.php in our module
 * directory.
 */
function cu_campus_directory_bundle_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_campus_directory_bundle');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'node', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
	  if (isset($theme_registry[$h]['theme paths'])) {
	    $first_element = array_shift($theme_registry[$h]['theme paths']);
	    array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
  	}
  }
}

/**
 * Get top most group from a given group id.
 */
function cu_campus_directory_bundle_get_top_group($id) {
  $query = db_select('og_membership', 'ogm');
  $query->condition('ogm.etid', $id, '=');
  $query->condition('ogm.entity_type', 'node', '=');
  $query->fields('ogm', array('gid'));
  $groups = $query->execute()->fetchCol();
  if (!empty($groups)) {
    $id = current($groups);
    $id = cu_campus_directory_bundle_get_top_group($id);
  }
  return $id;
}

/**
 * Implements hook_permission().
 */
function cu_campus_directory_bundle_permission() {
  return array(
    'edit group hierarchy' => array(
      'title' => t('Edit Group Hierarchy'),
    ),
  );
}

/**
 * Implements hook_form_alter.
 *
 * Hide group fields if you don't have access.
 * Alter group fields to be in a fieldset.
 */
function cu_campus_directory_bundle_form_node_form_alter(&$form, &$form_state, $form_id) {
  // do stuff
  if ($form['#node']->type == 'directory_listing') {
    $hide_group_fields = array(
      'group_group',
      'og_group_ref',
      'og_user_inheritance',
      'og_user_permission_inheritance',
    );
    if (!user_access('edit group hierarchy')) {
      foreach ($hide_group_fields as $field) {
        $form[$field]['#access'] = FALSE;
      }
      $form['field_directory_tasks']['#access'] = FALSE;
    }
    else {
      $form['directory_group'] = array(
        '#type' => 'fieldset',
        '#title' => 'Group Settings',
      );
      foreach ($hide_group_fields as $field) {
        $form['directory_group'][$field] = $form[$field];
        unset($form[$field]);
      }
      $form['directory_tasks'] = array(
        '#type' => 'fieldset',
        '#title' => 'Directory Listing Tasks',
      );
      $tasks = $form['field_directory_tasks'];
      $form['directory_tasks']['field_directory_tasks'] = $tasks;
      unset($form['field_directory_tasks']);
    }
  }
}

function cu_campus_directory_bundle_menu() {
  $items['directory-autocomplete'] = array(
    'access callback' => TRUE,
    'page callback' => 'cu_campus_directory_search_autocomplete',
    'title' => 'Directory Autocomplete',
    'type' => MENU_CALLBACK
  );

  $items['directory-tasks-autocomplete'] = array(
    'access callback' => TRUE,
    'page callback' => 'cu_campus_directory_tasks_autocomplete',
    'title' => 'Directory Tasks Autocomplete',
    'type' => MENU_CALLBACK
  );

  $items['tasks/results'] = array(
    'access callback' => TRUE,
    'page callback' => 'cu_campus_directory_tasks_results',
    'title' => 'Directory Search Reults',
    'type' => MENU_CALLBACK
  );
  $items['tasks/results/%'] = array(
    'access callback' => TRUE,
    'page callback' => 'cu_campus_directory_tasks_results',
    'page arguments' => array(2),
    'title' => 'Directory Search Reults',
    'type' => MENU_CALLBACK
  );

  $items['directory-search'] = array(
    'access callback' => TRUE,
    'page callback' => 'cu_campus_directory_bundle_search_page',
    'page arguments' => array('cu_campus_directory_bundle_autocomplete_form'),
    'title' => 'Directory search'
  );

  return $items;
}

function cu_campus_directory_tasks_results($task = NULL) {
  $output = array();

  $task = check_plain(urldecode($task));
  $vocab = taxonomy_vocabulary_machine_name_load('directory_tasks');
  $vid = $vocab->vid;
  $query = db_select('taxonomy_term_data', 'ttd');
  $query->condition('ttd.vid', $vid, '=');
  $query->fields('ttd', array('tid', 'name'));
  $query->condition('ttd.name', '%' . db_like($task) . '%', 'LIKE');
  $query->join('taxonomy_index', 'ti', 'ti.tid = ttd.tid');
  $query->fields('ti', array('nid', 'tid'));
  $query->join('node', 'n', 'n.nid = ti.nid');
  $query->fields('n', array('nid', 'title', 'status'));
  $query->condition('n.status', 1, '=');
  $query->orderBy('n.title', 'ASC');
  $results = $query->execute()->fetchAll();

  if (empty($results)) {
    $output['no_results']['#markup'] = 'Your directory search has no results.';
  }
  elseif (count($results) > 1) {

    $output['search']['text_search'] = drupal_get_form('cu_campus_directory_bundle_text_search_form');
    $output['search']['task_search'] = drupal_get_form('cu_campus_directory_bundle_task_search_form');
    $output['search']['#prefix'] = '<div class="directory-research-search-form">';
    $output['search']['#suffix'] = '</div>';



    $nids = array();
    foreach ($results as $result) {
      $nids[]= $result->nid;
    }
    $nodes = node_load_multiple($nids);
    $output['listings'] = node_view_multiple($nodes, 'teaser');
    $output['listings']['#prefix'] = '<div class="directory-task-results">';
    $output['listings']['#suffix'] = '</div>';

  }
  else {
    $result = $results[0]->nid;
    drupal_goto('node/' . $result);
  }


  return $output;
}

function cu_campus_directory_tasks_autocomplete($string) {
  $string = check_plain($string);
  $vocab = taxonomy_vocabulary_machine_name_load('directory_tasks');
  $vid = $vocab->vid;
  $matches = array();
  $result = db_select('taxonomy_term_data', 'ttd')
    ->condition('ttd.vid', $vid, '=')
    ->fields('ttd', array('tid', 'name'))
    ->condition('ttd.name', '%' . db_like($string) . '%', 'LIKE')



    ->range(0, 10)
    ->execute();

  // save the query to matches
  foreach ($result as $row) {
    $matches[$row->name] = check_plain($row->name);
  }

  // Return the result to the form in json
  drupal_json_output($matches);
}

function cu_campus_directory_search_autocomplete($string) {
  $matches = array();
  $result = db_select('node', 'n')
    ->condition('n.type', 'directory_listing', '=')
    ->condition('n.status', 1, '=')
    ->fields('n', array('nid', 'title'))
    ->condition('n.title', '%' . db_like($string) . '%', 'LIKE')
    ->range(0, 10)
    ->execute();

  // save the query to matches
  foreach ($result as $row) {
    $matches[$row->title] = check_plain($row->title);
  }

  // Return the result to the form in json
  drupal_json_output($matches);
}

function cu_campus_directory_bundle_text_search_form($form, &$form_state) {
  $form = array();
  $form['directory-search'] = array(
    '#prefix' => '<div id="directory-task-search" class="directory-search-wrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#title' => 'Search the Campus Directory',
  );
  $form['directory-search']['cse'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'directory-autocomplete',
    '#prefix' => '<div class="directory-search-element">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'placeholder' => variable_get('cu_campus_directory_placeholder_phrase', 'Search the CU Boulder Directory'),
    ),

  );

  $form['directory-search']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#prefix' => '<div class="directory-search-element">',
    '#suffix' => '</div>',
  );




  $form['#action'] = 'search';
  $form['#method'] = 'get';

  return $form;
}

function cu_campus_directory_bundle_task_search_form($form, &$form_state) {
  $form = array();



  $form['directory-tasks'] = array(
    '#prefix' => '<div id="directory-text-search" class="directory-search-wrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#title' => 'Search by Task',
  );

  $form['directory-tasks']['tasks'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'directory-tasks-autocomplete',
    '#prefix' => '<div class="directory-search-element">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'placeholder' => variable_get('cu_campus_directory_placeholder_phrase', 'I want to...'),
    ),

  );
  if (arg(2)) {
    $form['directory-tasks']['tasks']['#value'] = check_plain(urldecode(arg(2)));
  }
  $form['directory-tasks']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#prefix' => '<div class="directory-search-element">',
    '#suffix' => '</div>',
  );


  $form['#submit'][] = 'cu_directory_search_tasks';

  return $form;
}

function cu_directory_search_tasks($form, &$form_state) {
  $query = strtolower($form_state['values']['tasks']);
  drupal_goto('tasks/results/' . urlencode($query));
}

function cu_campus_directory_bundle_search_page() {
  $output = array();
  $output['text_search'] = drupal_get_form('cu_campus_directory_bundle_text_search_form');
  $output['task_search'] = drupal_get_form('cu_campus_directory_bundle_task_search_form');

  return $output;
}
